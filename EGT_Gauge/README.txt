 
This project was created using the stm32CubeIDE and then edited to use in prefered IDE.

* Create new stm32 project
* Select MCU
* Name project
* Targeted project type selected as 'STM32CUBE'

Without using the UI to configuare pins the cube ide gives you the all the
necessary CMSIS header files along with the bare minemum HAL files.
Once you start configuaring pins in the UI and generate the code then
more HAL files will be added to the project.

Build the project and go over the Makefile to add necessary compiler and linker flags to your
custom made Makefile.

Do not delete any files generated by the STM32CubeIDE so we can go back and use the cube ide if
necessary. Instead create a new folder called 'user' in the main project to keep a debug folder that
holds your custom Makefile.

We only use the FLASH linker script since we want to run the application from FlASH memory.

To find the preprocessor target MCU defintion in the STM32CubeIDE:
* Right-click on your project in the Project Explorer and select Properties.
* Navigate to C/C++ Build > Settings.
* Under MCU GCC Compiler > Preprocessor, you should see 'Define symbols (-D)'
STM32F411xE or a similar definition. This is where CubeIDE manages the target MCU define.

Build the project using 'bear' to link the compiler to the Project. Then move the compile_commands.json file
to the project root.
$ bear -- make build



When using the cube ide pinout configuaration UI, to keep the peripheral initialization in seperate files
navigate to the project manager tab in the .ioc file, in the code generater section check 'generate peripheral initialization as a pair of .c/.h files per peripheral'
